package com.cts.newsnest.authservice.controller;

import com.cts.newsnest.authservice.exception.UserNotFoundException;
import com.cts.newsnest.authservice.domain.User;
import com.cts.newsnest.authservice.service.UserService;
import com.cts.newsnest.authservice.config.JWTTokenGenerator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/v1/")
@CrossOrigin("*")
public class UserController {

    private UserService userService;
    private JWTTokenGenerator jwtTokenGenerator;
    ResponseEntity<?> responseEntity;

    @Value("${app.controller.exception.message1}")
    private String message1;

    @Value("${app.controller.exception.message2}")
    private String message2;

    @Value("${app.controller.exception.message3}")
    private String message3;


    @Autowired
    public UserController(UserService userService, JWTTokenGenerator jwtTokenGenerator) {
        this.userService = userService;
        this.jwtTokenGenerator = jwtTokenGenerator;
    }


    @PostMapping("login/user")
    public ResponseEntity<?> loginUser(@RequestBody User user) {
        try {
            if (user.getEmailId() == null || user.getPassword() == null) {
                throw new UserNotFoundException(message1);
            }
            User userDetails = userService.findByIdAndPassword(user.getEmailId(), user.getPassword());
            if (userDetails == null) {
                throw new UserNotFoundException(message2);
            }
            if (!(user.getPassword().equals(userDetails.getPassword()))) {
                throw new UserNotFoundException(message3);
            }
            /*
             * Create ResponseEntity with token generated by calling generateToken method of JwtTokenGenerator
             */
//            Map<?,?> responseEntity = jwtTokenGenerator.generateToken(user);
            return new ResponseEntity<>(jwtTokenGenerator.generateToken(user),HttpStatus.OK);
        } catch (UserNotFoundException e) {
            responseEntity = new ResponseEntity<>(e.getMessage(), HttpStatus.CONFLICT);
        }
        return responseEntity;
    }
}
